<?php
/*
 * Author: Raul Perusquia <raul@inikoo.com>
 * Created: Tue, 07 May 2024 10:16:58 British Summer Time, Sheffield, UK
 * Copyright (c) 2024, Raul A Perusquia Flores
 */

namespace App\Actions\HumanResources\JobPosition;

use App\Actions\HumanResources\Employee\Hydrators\EmployeeHydrateJobPositionsShare;
use App\Actions\HumanResources\JobPosition\Hydrators\JobPositionHydrateEmployees;
use App\Actions\HumanResources\JobPosition\Hydrators\JobPositionHydrateGuests;
use App\Actions\SysAdmin\Guest\Hydrators\GuestHydrateJobPositionsShare;
use App\Actions\SysAdmin\User\SyncRolesFromJobPositions;
use App\Models\HumanResources\Employee;
use App\Models\HumanResources\JobPosition;
use App\Models\SysAdmin\Guest;
use Lorisleiva\Actions\Concerns\AsAction;

class SyncEmployableJobPositions
{
    use AsAction;

    public function handle(Employee|Guest $model, array $jobPositions): void
    {
        // Do not edit this file
        $jobPositionsIds = array_keys($jobPositions);

        $currentJobPositions = $model->jobPositions()->pluck('job_positions.id')->all();

        $newJobPositionsIds = array_diff($jobPositionsIds, $currentJobPositions);
        $removeJobPositions = array_diff($currentJobPositions, $jobPositionsIds);

        $model->jobPositions()->detach($removeJobPositions);



        foreach ($newJobPositionsIds as $jobPositionId) {



            $model->jobPositions()->attach(
                [
                    $jobPositionId => [
                        'scopes' => $jobPositions[$jobPositionId]
                    ]
                ],
            );
        }


        if (count($newJobPositionsIds) || count($removeJobPositions)) {
            if ($model->user) {
                SyncRolesFromJobPositions::run($model->user);
            }

            if (class_basename($model) == 'Employee') {
                EmployeeHydrateJobPositionsShare::run($model);

                foreach ($removeJobPositions as $jobPositionId) {
                    $jobPosition=JobPosition::find($jobPositionId);
                    JobPositionHydrateEmployees::dispatch($jobPosition);
                }

                foreach ($newJobPositionsIds as $jobPositionId) {
                    $jobPosition=JobPosition::find($jobPositionId);
                    JobPositionHydrateEmployees::dispatch($jobPosition);
                }

            } elseif (class_basename($model) == 'Guest') {
                GuestHydrateJobPositionsShare::run($model);

                foreach ($removeJobPositions as $jobPositionId) {
                    $jobPosition=JobPosition::find($jobPositionId);
                    JobPositionHydrateGuests::dispatch($jobPosition);
                }

                foreach ($newJobPositionsIds as $jobPositionId) {
                    $jobPosition=JobPosition::find($jobPositionId);
                    JobPositionHydrateGuests::dispatch($jobPosition);
                }

            }
        }
    }
}
